* Some bindings for tags
#+name: bindings
#+begin_src emacs-lisp
  (setq notmuch-archive-tags (list "-inbox" "-again"))

  (eval-after-load 'notmuch-show
    '(define-key notmuch-show-mode-map "'" 'notmuch-show-apply-tag-macro))

  (define-key notmuch-search-mode-map "'" 'notmuch-search-apply-tag-macro)

  (defun my-notmuch-tag-delayed ()
    (let ((date (org-read-date)))
      (unless (string-match "^\\(....\\-..\\-..\\) ?\\(..:..\\)?" date)
        (error "internal error: org-mode-read-date"))
      (setq time (match-string 2 date))
      (setq date (match-string 1 date))
      (list (if time
                (format "+w%s-%s" date (replace-regexp-in-string ":" "-" time))
              (format "+w%s" date))
            "+waiting" "-inbox" "-again")))

  (setq notmuch-tag-macro-alist
    (list
     '("t" "+trash" "-inbox")
     '("r" "-unread")
     '("s" "+spam")
     '("f" "+flagged")
     '("w" my-notmuch-tag-delayed)
     (list* "a" notmuch-archive-tags)))

  (defun notmuch-show-apply-tag-macro (key)
    (interactive "k")
    (let ((tag (my-notmuch-get-tag-macro key)))
      (apply 'notmuch-show-tag-message tag)))

  (defun notmuch-search-apply-tag-macro (key)
    (interactive "ktag key: ")
    (let ((tag (my-notmuch-get-tag-macro key)))
      (if mark-active
          (notmuch-search-tag tag (region-beginning) (region-end))
        (notmuch-search-tag tag))))

  (defun my-notmuch-get-tag-macro (key)
    (let ((macro (assoc key notmuch-tag-macro-alist)))
      (unless macro
        (user-error "unknown key"))
      (when macro
        (let ((tag (cdr macro)))
          (if (functionp (car tag))
              (setq tag (apply (car tag) (cdr tag))))
          tag))))
#+end_src
* Some binding for other things
#+name: update
#+begin_src emacs-lisp
  (defvar muchsync-default-server ""
    "default server to sync with")

  (defvar muchsync-process)

  (defun muchsync (&optional server)
    "run mychsync

  if SERVER is not nil, use that as the server
  otherwise use the value of `muchsync-default-server'"
    (interactive)
    (when (and (boundp 'muchsync-process)
               (process-live-p muchsync-process))
      (user-error "muchsync is already running"))
    (let ((buf (get-buffer-create "*muchsync*")))
      (with-current-buffer buf
        (let ((inhibit-read-only t))
          (erase-buffer)
          (display-buffer buf)
          (setq buffer-read-only t)
          (let ((proc (start-process "*muchsync*" "*muchsync*"
                                     "muchsync" muchsync-default-server)))
            (setq muchsync-process proc)
            (set-process-filter proc 'comint-output-filter)
            (require 'shell) (shell-mode)
            (view-mode)
            (setq view-exit-action #'bury-buffer)

            ;; If *notmuch-hello* exists, refresh it after getting the mails
            (set-process-sentinel proc
                                  (lambda (process change)
                                    (when (get-buffer "*notmuch-hello*")
                                      (save-window-excursion
                                        (with-current-buffer "*notmuch-hello*"
                                          (notmuch-refresh-this-buffer)))))))))))

  (setq muchsync-default-server "suvrin.lot-of-stuff.info")

  (define-key notmuch-search-mode-map "g"
    'notmuch-poll-and-refresh-this-buffer)
  (define-key notmuch-hello-mode-map "g"
    'notmuch-poll-and-refresh-this-buffer)

  (define-key notmuch-search-mode-map "G"
    'muchsync)
  (define-key notmuch-hello-mode-map "G"
    'muchsync)

  (defun my-notmuch-browse-or-show ()
    (interactive)
    (if (or
         (thing-at-point 'url t)
         (and (thing-at-point 'filename t)
              (string-match-p "^[^/]*[[:alpha:]]\\{2,4\\}\\(/.*\\)$"
                              (thing-at-point 'filename t))))
        (call-interactively #'browse-url-at-point)
      (notmuch-show-toggle-message)))

  (define-key notmuch-show-mode-map (kbd "RET") 'my-notmuch-browse-or-show)
#+end_src
* Other config
#+name: prompt
#+begin_src emacs-lisp
  (setq notmuch-always-prompt-for-sender t)
  (setq notmuch-search-oldest-first ())
#+end_src
