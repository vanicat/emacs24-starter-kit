#+TITLE: Config pour TeX/LaTeX
#+OPTIONS: toc:nil num:nil ^:nil

* The latex hook
   :PROPERTIES:
   :ID:       c7219d91-75da-49e4-ab56-5d903f2cd00f
   :END:
#+begin_src emacs-lisp
  (defun my-LaTeX-mode-hook ()
   ;  (require 'bib-cite)
    (abbrev-mode 1)
    (latex-math-mode))

  (add-hook 'LaTeX-mode-hook 'my-LaTeX-mode-hook)
  (add-hook 'latex-mode-hook 'my-LaTeX-mode-hook)
#+end_src

* Indent environment list
#+name: dont-indent-tikk
#+begin_src emacs-lisp
  (push '("tikzpicture") LaTeX-indent-environment-list)
#+end_src

* Complete
#+name: complete
#+begin_src emacs-lisp
  (setq TeX-complete-expert-commands t)
  (setq TeX-electric-math t)
#+end_src

* Ecriture des maths
  :PROPERTIES:
  :ID:       636f5ff5-899c-446c-b383-2177f195cc61
  :END:
  #+begin_src emacs-lisp
    (defadvice LaTeX-math-left (around simple-left-command (arg))
      "Just insert \\left"
      (insert "\\left"))

    (ad-activate 'LaTeX-math-left)

    (setq LaTeX-math-abbrev-prefix "\"")
    (setq LaTeX-math-list '((?' "prime" nil nil)
                            (?= "neq" nil nil)
                            (?/ "frac" nil nil)
                            (?e "varepsilon" "" nil)
                            (?f "varphi" "" nil)
                            (?( "left" "" nil)
                            (?) "right" "" nil)
                            (?^ "widehat" "" nil)))

  #+end_src
* Parsing
** DÃ©tection des newtheorem*
   :PROPERTIES:
   :ID:       eff1feee-a9bd-4b89-951c-3f2132e4ef3f
   :END:
#+begin_src emacs-lisp
  (with-eval-after-load 'latex
    (TeX-add-style-hook
     "latex"
     (lambda ()
       (TeX-add-symbols
        '("newtheorem*" TeX-arg-define-environment
          [ TeX-arg-environment "Numbered like" ]
          t [ TeX-arg-counter "Within counter" ]))))

    (push '("\\\\newtheorem\\*{\\(\\(?:[a-zA-Z]\\|\\cj\\)+\\)}"
            1 LaTeX-auto-environment)
          LaTeX-auto-regexp-list))
#+end_src
* Outline minor mode
  #+name: outline-for-tex
  #+begin_src emacs-lisp
    (defvar my-latex-outline-regexp 
      "\\\\\\(sub\\)*section\\| *\\\\begin\\>\\| *\\\\end\\>")

    (defun my-tex-outline-level ()
      "compute the level of a outline for ruby"
      (save-match-data
        (cond
          ((looking-at "\\\\begin{document}")
           1)
          ((looking-at "\\\\\\(sub\\)*section") 
           (+ (/ (- (length (match-string 0))
                     8)
                  3)
              2))

          ((looking-at "\\( *\\)")
           (+ 4 (length (match-string 1)))))))

    (defun define-latex-outline ()
      (interactive)
      (make-local-variable 'outline-regexp)
      (setq outline-regexp my-latex-outline-regexp)
      (make-local-variable 'outline-level)
      (setq outline-level #'my-tex-outline-level)
      (outline-minor-mode))

    (add-hook 'latex-mode-hook #'define-latex-outline)
  #+end_src

* mod-time in latex
#+name: mod-time
#+begin_src emacs-lisp
  (defun LaTeX-update-PDF-ModDate ()
    (interactive)
    (ignore-errors 
      (when (eq major-mode 'latex-mode)
        (save-excursion
          (goto-char (point-min))
          (when (search-forward-regexp "\\\\hypersetup{" nil t)
            (backward-char)
            (let ((beg (point))
                  (end (make-marker)))
              (forward-list)
              (set-marker end (point))
              (goto-char beg)
              (when (search-forward-regexp "ModDate={D:\\([^}]+\\)}" end t)
                (replace-match (format-time-string "%Y%m%d%H%M%S%z")
                               t t nil 1))))))))
  (defun LaTeX-add-PDF-timestamp ()
    (interactive)
    (insert "\\hypersetup{pdfinfo={
      CreationDate={D:")
    (insert (format-time-string "%Y%m%d%H%M%S%z"))
    (insert "},
      ModDate={D:")
    (insert (format-time-string "%Y%m%d%H%M%S%z"))
    (insert "}
  }}"))

  (add-hook 'before-save-hook #'LaTeX-update-PDF-ModDate)
#+end_src

* ID in pdf
#+name: id-in-pdf
#+begin_src emacs-lisp
  (defun my-TeX-LaTeX-sentinel-advice (process name)
    (with-current-buffer TeX-command-buffer
      (let ((pdf-name (TeX-master-file "pdf"))
            (tex-md5sum (upcase (md5 TeX-command-buffer))))
        (when (and (file-exists-p pdf-name) (file-writable-p pdf-name))
          (with-temp-buffer
            (insert-file-contents-literally pdf-name t nil nil t)
            (goto-char (point-min))
            (when (search-forward-regexp "^/ID \\[<\\([[:alnum:]]+\\)> <\\([[:alnum:]]+\\)>]" nil t)
              (replace-match tex-md5sum t t nil 1)
              (replace-match tex-md5sum t t nil 2))
            (basic-save-buffer))))))

  (advice-add 'TeX-LaTeX-sentinel :after #'my-TeX-LaTeX-sentinel-advice)
#+end_src

* Le reste
  :PROPERTIES:
  :ID:       17134eb5-6bc8-4c58-b836-e7812c407746
  :END:
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-flyspell)

  (setq TeX-PDF-mode t)
  (setq TeX-arg-right-insert-p nil)
  (setq TeX-auto-save t)
  (setq TeX-auto-untabify t)
  (setq TeX-auto-x-parse-length 99999)
  (setq TeX-auto-x-regexp-list 'LaTeX-auto-regexp-list)
  (setq TeX-byte-compile t)
  (setq TeX-electric-sub-and-superscript t)
  (setq TeX-math-close-double-dollar t)
  (setq TeX-command-list
        (append TeX-command-list
                '(("pythontex" "pythontex %s" TeX-run-command nil t :help "run pythontex"))))
  (setq TeX-output-view-style '(("^dvi$"
                                 ("^landscape$" "^pstricks$\\|^pst-\\|^psfrag$")
                                 "%(o?)dvips -t landscape %d -o && evince %f")
                                ("^dvi$" "^pstricks$\\|^pst-\\|^psfrag$" "%(o?)dvips %d -o && evince %f")
                                ("^dvi$"
                                 ("^\\(?:a4\\(?:dutch\\|paper\\|wide\\)\\|sem-a4\\)$" "^landscape$")
                                 "%(o?)xdvi %dS -paper a4r -s 0 %d")
                                ("^dvi$" "^\\(?:a4\\(?:dutch\\|paper\\|wide\\)\\|sem-a4\\)$" "%(o?)xdvi %dS -paper a4 %d")
                                ("^dvi$"
                                 ("^\\(?:a5\\(?:comb\\|paper\\)\\)$" "^landscape$")
                                 "%(o?)xdvi %dS -paper a5r -s 0 %d")
                                ("^dvi$" "^\\(?:a5\\(?:comb\\|paper\\)\\)$" "%(o?)xdvi %dS -paper a5 %d")
                                ("^dvi$" "^b5paper$" "%(o?)xdvi %dS -paper b5 %d")
                                ("^dvi$" "^letterpaper$" "%(o?)xdvi %dS -paper us %d")
                                ("^dvi$" "^legalpaper$" "%(o?)xdvi %dS -paper legal %d")
                                ("^dvi$" "^executivepaper$" "%(o?)xdvi %dS -paper 7.25x10.5in %d")
                                ("^dvi$" "." "%(o?)xdvi %dS %d")
                                ("^pdf$" "." "evince -remote %s -raise %o %(outpage)")
                                ("^html?$" "." "gvfs-open %o")))

  (setq TeX-parse-self t)
  (setq TeX-printer-list '(("Default" "%(o?)dvips -f %s | lpr" "lpq")
                           ("Pdf" "%(o?)dvips -f %s | lpr -PVirtual_Printer" nil)
                           ("Parent" nil "lpq")
                           ("sharpprepa" nil)
                           ("Serveur" nil "EpsonServer")
                           ("Local" nil "EpsonLocal")))
  (setq TeX-view-program-list nil)
  (setq TeX-view-program-selection '(((output-dvi style-pstricks) "dvips and gv")
                                     (output-dvi "Evince")
                                     (output-pdf "Evince")
                                     (output-html "xdg-open")))

#+end_src
