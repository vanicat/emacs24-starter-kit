#+TITLE: MR Emacs mode

* Running mr
** Customizable variable
   #+name: mr-variables
   #+begin_src emacs-lisp
     (defcustom mr-command "mr"
       "Where to find the mr command

     It will be looked for in the path."

       :type 'string)
   #+end_src
** Const
   #+name: mr-consts
   #+begin_src emacs-lisp
     (defconst mr-commands (list "checkout"
                                 "update"
                                 "status"
                                 "commit"
                                 "record"
                                 "push"
                                 "diff"
                                 "log"
                                 "run"
                                 "bootstrap"
                                 "register"
                                 "config"
                                 "online"
                                 "offline"
                                 "remember")
       "The known mr commands ")

     (defvar mr-buffer-name "*mr-run*"
       "The name of the buffer where mr is run")
   #+end_src


** Generic command
   #+name: generic-command
   #+begin_src emacs-lisp
     (defun mr-command (command &optional directory &rest args)
       "Run mr COMMAND in the DIRECTORY with ARGS.

     directory is by default the home diretory.

     With prefix argument, MR-COMMAND will ask for the direcrory"
       (interactive
        (list
         (completing-read "Command: " mr-commands () 'confirm)
         (if current-prefix-arg
             (read-directory-name "Directory where to run: ")
             (getenv "HOME"))))
       (pop-to-buffer mr-buffer-name)
       (if (get-buffer-process mr-buffer-name)
           (error "mr already running"))
       (let ((default-directory directory))
         (apply #'start-process "mr" mr-buffer-name mr-command command
       args)))

   #+end_src
** Specialized command
*** The macros
    #+begin_src emacs-lisp
      (defmacro define-mr-command (command)
      "Define a simple mr-command"
      `(defun ,(intern (concat "mr-" command)) (&optional directory)
         (interactive
          (list (if current-prefix-arg
                    (read-directory-name "Directory where to run: ")
                    (getenv "HOME"))))
         (mr-command ,command directory)))

      (defmacro define-mr-commands ()
        `(progn
           ,@(mapcar (lambda (command) `(define-mr-command ,command))
                     mr-commands)))

    #+end_src
*** Applying them
    #+begin_src emacs-lisp
      (define-mr-command "checkout")
      (define-mr-command "update")
      (define-mr-command "status")
      (define-mr-command "commit")            ;TODO: the message!
      (define-mr-command "record")            ;TODO: the message!
      (define-mr-command "push")
      (define-mr-command "diff")
      (define-mr-command "log")
      ;;(define-mr-command "run")              TODO: need argument
      ;;(define-mr-command "bootstrap")        TODO: need argument
      (define-mr-command "register")          ;TODO: should alway ask for
                                              ;the directory argument
      ;;(define-mr-command "config")           TODO: need argument
      (define-mr-command "online")
      (define-mr-command "offline")
      ;;(define-mr-command "remember")         TODO: need argument
    #+end_src
